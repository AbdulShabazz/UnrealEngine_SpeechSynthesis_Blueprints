#pragma once

#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

/*
Example Usage:

int main() {
    // Example coefficients (replace with actual impulse response data)
    std::vector<double> coeffs = { 0.1, 0.2, 0.3, 0.2, 0.1 };

    FIRFilter nasalCavityFilter(coeffs);

    // Example usage
    std::vector<double> inputSignal = { 1.0, 2.0, 3.0, 4.0, 5.0 }; // Replace with actual input signal
    std::vector<double> outputSignal;

    for (double sample : inputSignal) {
        double output = nasalCavityFilter.process(sample);
        outputSignal.push_back(output);
    }

    // Output the filtered signal
    for (double sample : outputSignal) {
        std::cout << sample << std::endl;
    }

    return 0;
}
*/

class FIRFilter
{
private:
    std::vector<double> coefficients;
    std::vector<double> buffer;

public:
    FIRFilter(const std::vector<double>& coeffs) : coefficients(coeffs), buffer(coeffs.size(), 0.0) {}

    double process(double input) {
        // Shift the buffer
        std::rotate(buffer.rbegin(), buffer.rbegin() + 1, buffer.rend());

        // Insert the new sample
        buffer[0] = input;

        // Apply the filter: Multiply and accumulate
        double output = std::inner_product(buffer.begin(), buffer.end(), coefficients.begin(), 0.0);

        return output;
    }
};

