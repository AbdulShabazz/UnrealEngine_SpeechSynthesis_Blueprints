enum class Endian {
    Little,
    Big
};

Endian check_endianness() {
    union {
        uint32_t i;
        char c[4];
    } bint = {0x01020304};

    return (bint.c[0] == 1) ? Endian::Big : Endian::Little;
}


#include <cstdint>
#include <cstring>

class DataView {
public:
    DataView(void* buffer, size_t size) : buffer_(buffer), size_(size) {}

    uint32_t getUint32(size_t offset, bool littleEndian) {
        if (offset + 4 > size_) {
            throw std::out_of_range("Offset out of range");
        }

        uint32_t value;
        std::memcpy(&value, static_cast<char*>(buffer_) + offset, 4);

        if ((check_endianness() == Endian::Little && !littleEndian) ||
            (check_endianness() == Endian::Big && littleEndian)) {
            value = (value >> 24) |
                    ((value << 8) & 0x00FF0000) |
                    ((value >> 8) & 0x0000FF00) |
                    (value << 24);
        }

        return value;
    }

    // Similar functions can be defined for getUint16, getInt32, etc.

private:
    void* buffer_;
    size_t size_;
};


//
    /**
    @brief Generates a Quarter-Sine wave.
    @param amplitude_constDouble: The amplitude of the oscillator signal.
    @param frequencyHz_double: The frequency of the oscillator signal.
    @param timeStep_constDouble: The time-step (t) at which the oscillator is to be evaluated.
    @param theta_constDouble: The phase of the oscillator signal.
    @param quarterPeriod_constDouble: The quarter-period of the oscillator signal.
    @return double ( The oscillator signal at time-step t).*/
    double quarterSine(const double amplitude_constDouble
        , const double frequencyHz_double
        , const double timeStep_constDouble
        , const double theta_constDouble) const {
            const double RF = 1 / frequencyHz_double * timeStep_constDouble; // Relative Frequency
        return amplitude_constDouble * std::sin(0.5f * PI_HiRes * RF + theta_constDouble);
    }

    /**
    @brief Generates a Half-Sine wave.
    @param amplitude_constDouble: The amplitude of the oscillator signal.
    @param frequencyHz_double: The frequency of the oscillator signal.
    @param timeStep_constDouble: The time-step (t) at which the oscillator is to be evaluated.
    @param theta_constDouble: The phase of the oscillator signal.
    @return double ( The oscillator signal at time-step (t).*/
    double halfSine(const double amplitude_constDouble
        , const double frequencyHz_double
        , const double timeStep_constDouble
        , const double theta_constDouble) const {
            const double RF = 1 / frequencyHz_double * timeStep_constDouble; // Relative Frequency
        return amplitude_constDouble * std::sin(PI_HiRes * RF + theta_constDouble);
    }
//
    /**
    @brief Generates a Quarter-Sine wave.
    @param amplitude_constDouble: The amplitude of the oscillator signal.
    @param frequencyHz_double: The frequency of the oscillator signal.
    @param timeStep_constDouble: The time-step (t) at which the oscillator is to be evaluated.
    @param theta_constDouble: The phase of the oscillator signal.
    @param quarterPeriod_constDouble: The quarter-period of the oscillator signal.
    @return double ( The oscillator signal at time-step t).*/
    double quarterSine(const double amplitude_constDouble
        , const double frequencyHz_double
        , const double timeStep_constDouble
        , const double theta_constDouble) const {
            const double RF = 1 / frequencyHz_double * timeStep_constDouble; // Relative Frequency
            const double quarterPeriod_constDouble = 1 / (4 * frequencyHz_double);
        return amplitude_constDouble * std::sin(2 * PI_HiRes * std::fmod(std::abs(timeStep_constDouble), quarterPeriod_constDouble) + theta_constDouble);
    }

    /**
    @brief Generates a Half-Sine wave.
    @param amplitude_constDouble: The amplitude of the oscillator signal.
    @param frequencyHz_double: The frequency of the oscillator signal.
    @param timeStep_constDouble: The time-step (t) at which the oscillator is to be evaluated.
    @param theta_constDouble: The phase of the oscillator signal.
    @return double ( The oscillator signal at time-step (t).*/
    double halfSine(const double amplitude_constDouble
        , const double frequencyHz_double
        , const double timeStep_constDouble
        , const double theta_constDouble) const {
            const double RF = 1 / frequencyHz_double * timeStep_constDouble; // Relative Frequency
            const double halfPeriod_constDouble = 1 / (2 * frequencyHz_double);
        return amplitude_constDouble * std::sin(2 * PI_HiRes * std::fmod(std::abs(timeStep_constDouble), halfPeriod_constDouble) + theta_constDouble);
    }
//
    /**
    @brief Generates formant signals based on specific wave-shape parameters.
    @details Generates formant signals based on specific wave-shape parameters.
    @param shapes_oscilatorParamsVec: The complex wave-shapes to develop.
    @param customUpdateCallback: A lambda function that can be used to update the oscillator parameters.
    @return double (The oscillator signal at time-step t).*/
    template <
        typename AmplitudeType = double,
        typename FrequencyHzType = double,
        typename ThetaType = double,
        typename ShapeType = enum class WaveShape,
        typename OutputShapeType = double,
        typename TimeStepType = double,
        typename OscillatorParameterType = OscillatorParameters<AmplitudeType
        , FrequencyHzType
        , ThetaType
        , ShapeType
        , OutputShapeType
        , TimeStepType>
    >
    requires ( bitwise_ops_compatible_shapeType<ShapeType> )
    double generateComplexSignal(const std::vector<OscillatorParameterType>& shapes_oscillatorParamsVec
        , UpdateFunction<OscillatorParameterType, OutputShapeType> customUpdateCallback) {

        double outShape {};

        for (const OscillatorParameterType& shape_oscillatorParams : shapes_oscillatorParamsVec) {

            const WaveShape& shape_enumClass = shape_oscillatorParams.shape;
            double timeStep_Double = shape_oscillatorParams.timeStepStart;
            const double& timeStepEnd_constDouble = !shape_oscillatorParams.usesTimeInterval_flag ? 
                shape_oscillatorParams.timeStepEnd : 
                shape_oscillatorParams.timeStepStart 
                + shape_oscillatorParams.timeInterval.value;

            while (timeStep_Double < timeStepEnd_constDouble) {
                // Custom updates using the optional lambda function
                if (customUpdateCallback) {
                    outShape = customUpdateCallback(
                        std::make_shared<Oscillator>(*this),
                        shape_oscillatorParams,
                        outShape);
                } else {

                    bool isShapeSpecified_flag = false;

                    if (hasShape(shape_enumClass, WaveShape::Sine_enum)) {
                        outShape += sine(shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart
                            , shape_oscillatorParams.theta);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::Cosine_enum)) {
                        outShape += cosine(shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart
                            , shape_oscillatorParams.theta);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::QuarterSine_enum)) {
                        outShape += quarterSine(shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart
                            , shape_oscillatorParams.theta);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::HalfSine_enum)) {
                        outShape += halfSine(shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart
                            , shape_oscillatorParams.theta);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::Triangle_enum)) {
                        outShape += Triangle(shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::Square_enum)) {
                        outShape += Square(shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::ForwardSawtooth_enum)) {
                        outShape += forwardSaw(shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::ReverseSawtooth_enum)) {
                        outShape += ReverseSaw (shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::WhiteNoise_enum)) {
                        outShape += whiteNoise (shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::BrownNoise_enum)) {
                        outShape += brownNoise (shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::PinkNoise_enum)) {
                        outShape += pinkNoise (shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::YellowNoise_enum)) {
                        outShape += yellowNoise (shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::BlueNoise_enum)) {
                        outShape += blueNoise (shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (hasShape(shape_enumClass, WaveShape::GreyNoise_enum)) {
                        outShape += greyNoise (shape_oscillatorParams.amplitude
                            , shape_oscillatorParams.frequencyHz
                            , shape_oscillatorParams.timeStepStart);
                        isShapeSpecified_flag = true;
                    }

                    if (!isShapeSpecified_flag) 
                        throw std::invalid_argument("Unexpected or Unknown wave-shape.");

                }
                timeStep_constDouble += timeIntervalOption_constDouble;
            } // End of while loop
        } // End of for loop

        return outShape;
    } // End of generateComplexSignal() function
//
    /**
    @brief Generates a monolithic signal based on the specified wave-shape.
    @details Generates a monolithic signal based on the specified wave-shape.
    @param amplitude_constDouble - The amplitude of the oscillator signal.
    @param frequencyHz_double - The frequency of the oscillator signal.
    @param theta_constDouble - The phase of the oscillator signal.
    @param shape - The wave-shape of the oscillator signal.
    @param OutputShape_numericType - The output shape of the oscillator signal.
    @param timeStepStart_constDouble - The time-step (t) at which the oscillator is to be evaluated.
    @param timeInterval - The time-step (t) at which the oscillator is to be evaluated.
    @param customUpdateCallback - A lambda function that can be used to update the oscillator parameters.
    @return double (The oscillator signal at time-step t).*/
    double generateBasicSignal(const OscillatorParameters<>& oscillatorParams
        , UpdateFunction<>& customUpdateCallback
    ) const {
        return generateBasicSignal(amplitude_constDouble
            , frequencyHz_double
            , theta_constDouble
            , shape
            , OutputShape_numericType
            , timeStepStart_constDouble
            , timeStepStart_constDouble + timeInterval.value
            , customUpdateCallback);
    }
//
    /**
    @brief The UpdateFunction class is used to (custom) update the oscillator parameters at time-step (t).
    @details The UpdateFunction class is used to (custom) update the oscillator parameters at time-step (t).
    @param Oscillator_sharedPtr: A shared pointer to the Oscillator class (*self).
    @param Amplitude_numericType: The amplitude of the oscillator signal.
    @param FrequencyHz_numericType: The frequency of the oscillator signal.
    @param Theta_numericType: The phase of the oscillator signal.
    @param Shape_numericType: The wave-shape of the oscillator signal.
    @param OutputShape_numericType: The output shape of the oscillator signal.
    @param TimeStepStart_numericType: The time-step (t) at which the oscillator is to be evaluated.
    @param TimeStepEnd_numericType: The time-step (tEnd) at which the oscillator is to be evaluated.
    @param TimeStepInterval_TimeIntervalType: The time-step (t) at which the oscillator is to be evaluated.
    @return OutputShape_numericType (The oscillator signal at time-step t).*/
    template <
        typename Amplitude_numericType = double
        , typename FrequencyHz_numericType = double
        , typename Theta_numericType = double
        , typename Shape_numericType = enum class WaveShape
        , typename OutputShape_numericType = double
        , typename TimeStepStart_numericType = double
        , typename TimeStepEnd_numericType = double
    >
    using UpdateFunction = 
        std::function<OutputShape_numericType(
            std::shared_ptr<class Oscillator>
            , const Amplitude_numericType
            , const FrequencyHz_numericType
            , const Theta_numericType
            , const Shape_numericType
            , OutputShape_numericType
            , const TimeStepStart_numericType
            , const TimeStepEnd_numericType
        )>;
//
    /**
    @brief Generates a mxed signal based on the specified wave-shape.
    @param shapes_constVec: The wave-shapes to generate.
    @param timeStepStart_constDouble: The time-step (t) at which the oscillator is to be evaluated.
    @param timeIntervalOption_constDouble: (option 2)The time-step (t) at which the oscillator is to be evaluated.
    @param customUpdateCallback: A lambda function that can be used to update the oscillator parameters.
    @return double (The oscillator signal at time-step t).*/
    double generateComplexSignal(
        const std::vector<WaveShape>& shapes_constVec, 
        const double timeStepStart_constDouble, 
        const double timeInterval_constDouble,
        UpdateFunction<> customUpdateCallback) {
            return generateComplexSignal(shapes_constVec
                , timeStepStart_constDouble
                , timeStepStart_constDouble + timeInterval_constDouble
                , customUpdateCallback);
        }
//
    Oscillator(
    const double amplitude = 0.6f, 
    const double frequency = 440.0f, 
    const double phase = 0.0f)
    : amplitude_double(amplitude), frequencyHz_double(frequency), theta_double(phase) {}
//
    /**
    @brief Generates a signal based on the specified wave-shape.
    @param amplitude: The amplitude of the oscillator signal. */
    void setAmplitude(const double amplitude) noexcept {
        amplitude_double = amplitude;
    }
//
    template <typename T, typename U>
    concept bitwise_ops = requires(T a, U b) {
        // Check if both operands are enum types
        static_cast<uint32_t>(a) & static_cast<uint32_t>(b);
        static_cast<uint32_t>(a) | static_cast<uint32_t>(b);
    };

    template <typename T, typename U>
    concept bitwise_ops_compatible = requires(T a, U b) {
        // Check if both operands are WaveShapeType or ComplexWaveShape
        static_cast<uint32_t>(a) & static_cast<uint32_t>(b);
        static_cast<uint32_t>(a) | static_cast<uint32_t>(b);
    };
//
    template <typename T, typename U>
    concept bitwise_ops = requires(T a, U b) {
        // Check if both operands are enum types
        static_cast<uint32_t>(a) & static_cast<uint32_t>(b);
        static_cast<uint32_t>(a) | static_cast<uint32_t>(b);
    };
//
    /**
    @brief The UpdateFunction class is used to (custom) update the oscillator parameters at time-step (t).
    @details The UpdateFunction class is used to (custom) update the oscillator parameters at time-step (t).
    @param Amplitude_numericType: The amplitude of the oscillator signal.
    @param FrequencyHz_numericType: The frequency of the oscillator signal.
    @param Theta_numericType: The phase of the oscillator signal.
    @param Shape_numericType: The wave-shape of the oscillator signal.
    @param OutputShape_numericType: The output shape of the oscillator signal.
    @param TimeStep_numericType: The time-step (t) at which the oscillator is to be evaluated.
    @return OutputShape_numericType (The oscillator signal at time-step t).*/
    template <
        typename Amplitude_numericType = double
        , typename FrequencyHz_numericType = double
        , typename Theta_numericType = double
        , typename Shape_numericType = enum class WaveShape
        , typename OutputShape_numericType = double
        , typename TimeStep_numericType = double
    >
    using UpdateFunction = 
        std::function<OutputShape_numericType(
            std::shared_ptr<class Oscillator>&
            , Amplitude_numericType&   // Amplitude
            , FrequencyHz_numericType& // Frequency in Hz
            , Theta_numericType&       // Theta
            , Shape_numericType&       // Shape
            , OutputShape_numericType& // Output Shape
            , const TimeStep_numericType& // Time Step Start
            , const TimeStep_numericType& // Time Step End
            , const TimeInterval&  // Time Interval (optional)
        )>;
//
sin approximation (performance)

```cpp
    float approximate_sin_f(const float x)
    {
        // Calculate 2 PI inverse (once)
        const float inverse_2pi_ConstFloat32 = 1 / 2 * PI;

        // Calculate t_step_float32 
        float t_step_float32 = x * inverse_2pi_ConstFloat32;

        // Wrap t_step_float32 to fit [0, 1]
        t_step_float32 = t_step_float32 - static_cast<int>(t_step_float32);

        // Calculate sin(x) using a quadratic approximation cf. square wave (eg. pipe organ)
        return (t_step_float32 < 0.5f) ? 
        -16 * t_step_float32 * t_step_float32 + 8 * t_step_float32 :    // positive half
         16 * t_step_float32 * t_step_float32 - 8 * t_step_float32 + 8; // negative half

        // Calculate sin(x) using a cubic approximation cf. sawtooth (eg. flutish)
        /*
        return 20.785f * (t_step_float32  - 0.0f) * (t_step_float32  - 0.5f) * (t_step_float32  - 1.0f);
        */
    }
```
//

	/** Activates speech synthesis channel phoneme functionality 'Q' ( _Q_uestion ) */
	UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech", DisplayName = "ARPABETSpeechSynthesis: other > pause or glottal_stop > Q ( _Q_uestion )" ))
	void ARPABETSpeechSynthesis_Q(
		UPARAM(DisplayName = "Voices") const int Voices)
	{
		if (speech_packets_TArrayUInt8.Num() < 1)
			speech_packets_TArrayUInt8.Push(ARPABETPhone::Q_Base());
		else if (current_phone && ( current_phone != ARPABETPhone::Q_Base() ))
		{
			// include a transition packet
			speech_packets_TArrayUInt8.Push(ARPABETPhone::Q_Base());
			speech_packets_TArrayUInt8.Push(ARPABETPhone::Q_Base());
		}
		else
		{
			speech_packets_TArrayUInt8.Push(ARPABETPhone::Q_Base());
		}
	};

	// Setup and Activation APIs

	/** Activates speech synthesis channel functionality 'Voice' */
	UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech, Voice", DisplayName = "ARPABETSpeechSynthesis: Voice [compile]" ))
	int /*ARPABETAudio*/ Voice()
	{
		if (speech_packets_TArrayUInt8.Num() < 1)
			return 0;

		bool transition_flag = false;

		do
		{
			uint8_t current_phone_uint8_t = speech_packets_TArrayUInt8.Last();
			speech_packets_TArrayUInt8.Pop();

			// We are either generating a phone or a phone-transition packet
			if (!transition_flag)
			{
				// generate a new phone packet

				transition_flag = true;
			}
			else
			{

				transition_flag = false;
			}
		} while (speech_packets_TArrayUInt8.Num());

		return 1;
	};

//

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UProsodyCurve : public UObject
{
	GENERATED_BODY()
};

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UDurationCurve : public UObject
{
	GENERATED_BODY()
};

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UEmotiveCurve : public UObject
{
	GENERATED_BODY()
};

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UARPABETAudio : public UObject
{
	GENERATED_BODY()

	TArray<uint8> datastream_TArrayUInt8{};

public:

	struct Save
	{
		// Lossless Audio Formats

		UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech", DisplayName = "ARPABETAudio: SaveAsWAVFile" ))
		bool AsWAVFile(UPARAM(DisplayName = "filename_FText") const FText& filename_ConstFTextRef)
		{
			/*

			// Create a FWaveFormat object

			FWaveFormat WaveFormat_FWaveFormatFile{};
			WaveFormat_FWaveFormatFile.NumChannels = 2; // Stereo
			WaveFormat_FWaveFormatFile.SampleRate = 44100; // 44.1 kHz

			// Create a FByteBulk object

			FByteBulk ByteBulk_FByteBulkObj{};
			ByteBulk_FByteBulkObj.WaveFormat = WaveFormat_FWaveFormatFile;

			// Write the datastream_TArrayUInt8 to the FByteBulk object

			ByteBulk_FByteBulkObj.Write(datastream_TArrayUInt8.GetData(), datastream_TArrayUInt8.Num());

			// Save the FByteBulk object to disk

			FFileHandle fh_FileHandle{};
			fh_FileHandle.Open(filename_ConstFTextRef, EFileWrite::FILEWRITE_Append);
			ByteBulk_FByteBulkObj.Save(fh_FileHandle);
			fh_FileHandle.Close();

			*/
			return true;
		};

		UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech", DisplayName = "ARPABETAudio: SaveAsFLACFile" ))
		bool AsFLACFile(UPARAM(DisplayName = "filename_FText") const FText& filename_ConstFTextRef)
		{
			/*

			// Create a FLAC Encoder from the datastream_TArrayUInt8

			FFLACEncoder Encoder{};

			// Set the FLAC Encoder's parameters

			Encoder.SetChannels(2);
			Encoder.SetBitRate(192000);
			Encoder.SetSampleRate(44100);

			// Initialize the FLAC Encoder

			Encoder.Initialize();

			// Write the data to the FLAC Encoder

			FByteStream ByteStream_FByteStream{};

			for (const uint8& byte : datastream_TArrayUInt8)
			{
				ByteStream_FByteStream.Add(byte);
			}

			ByteStream_FByteStream.Seek(0);

			Encoder.WriteData(ByteStream_FByteStream);

			TArray<uint8> EncodedData_TArrayUInt8 = Encoder.GetEncodedData();

			// Flush the FLAC Encoder

			Encoder.Flush();

			// Close the FLAC Encoder

			Encoder.Close();

			// Save the FLAC Encoder to a file

			return FFileHelper::SaveArrayToFile(EncodedData_TArrayUInt8, *filename_ConstFTextRef);

			*/
			return false;
		};

		// Lossy Audio Formats

		UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech", DisplayName = "ARPABETAudio: SaveAsMP3File" ))
		bool AsMP3File(UPARAM(DisplayName = "filename_FText") const FText& filename_ConstFTextRef)
		{
			/*

			// Create a ByteReader from the datastream_TArrayUInt8

			FByteReader ByteReader(filename_ConstFTextRef);

			// Create an MP3Encoder from the ByteReader

			FMP3Encoder MP3Encoder(ByteReader);

			// Encode the MP3Encoder

			MP3Encoder.Encode();

			// Get the MP3Encoder's encoded data

			TArray<uint8> EncodedData_TArrayUInt8 = MP3Encoder.GetEncodedData();

			// Write the MP3Encoder to a file

			return FFileHelper::SaveArrayToFile(EncodedData_TArrayUInt8, filename_ConstFTextRef);

			*/
			return false;
		};

		bool AsAACFile()
		{
			return true;
		};
	};

	UFUNCTION(BlueprintCallable, meta = ( DisplayName = "PlayBack",
		Keywords = "TTS, SpeechSynthesis, TextToSpeech, voice, marytts, tacotron2" ),
		Category = "TextToSpeech")
	void PlayBack()
	{

	};

};

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UTTSVoice : public UObject
{
	GENERATED_BODY()
};

//
    UCLASS()
    class /*SPEECHSYNTHESIS_API*/ FProsodyCurve : public UBlueprintFunctionLibrary
    {
        GENERATED_UCLASS_BODY()

	public:

    };

    UCLASS()
    class /*SPEECHSYNTHESIS_API*/ FDurationCurve : public UBlueprintFunctionLibrary
    {
        GENERATED_UCLASS_BODY()

	public:

    };

    UCLASS()
    class /*SPEECHSYNTHESIS_API*/ FEmotiveCurve : public UBlueprintFunctionLibrary
    {
        GENERATED_UCLASS_BODY()

	public:

    };
//
		USpeechSynthesisBPLibrary() :
			ChannelCount_UInt32{ 2 },
			SampleWidth_UInt32{ 2 },
			FrameRateHz_UInt32{ 44100 }
		{
			voices_FTTSVoiceArray = { FTTSVoice::Sara() };  // Only one voice chorus for simplicity
		};

        ~USpeechSynthesisBPLibrary()
        {

        }

//        
float USpeechSynthesisBPLibrary::SpeechSynthesisSampleFunction(float Param)
{
	return -1;
}

//
		UFUNCTION(BlueprintCallable, meta = ( DisplayName = "Voice [compile]", 
            Keywords = "SpeechSynthesis TextToSpeech voice marytts tacotron2" ), Category = "TextToSpeech")
        TArray<uint8> Voice()
        {
            // ... (e.g., generate wave-synthesis data)

            // ... (e.g., perform signal processing)

            return datastream_TArrayUInt8;
        };


