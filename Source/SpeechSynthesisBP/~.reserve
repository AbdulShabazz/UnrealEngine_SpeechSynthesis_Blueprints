
//
sin approximation (performance)

```cpp
    float approximate_sin_f(const float x)
    {
        // Calculate 2 PI inverse (once)
        const float inverse_2pi_ConstFloat32 = 1 / 2 * PI;

        // Calculate t_step_float32 
        float t_step_float32 = x * inverse_2pi_ConstFloat32;

        // Wrap t_step_float32 to fit [0, 1]
        t_step_float32 = t_step_float32 - static_cast<int>(t_step_float32);

        // Calculate sin(x) using a quadratic approximation cf. square wave (eg. pipe organ)
        return (t_step_float32 < 0.5f) ? 
        -16 * t_step_float32 * t_step_float32 + 8 * t_step_float32 :    // positive half
         16 * t_step_float32 * t_step_float32 - 8 * t_step_float32 + 8; // negative half

        // Calculate sin(x) using a cubic approximation cf. sawtooth (eg. flutish)
        /*
        return 20.785f * (t_step_float32  - 0.0f) * (t_step_float32  - 0.5f) * (t_step_float32  - 1.0f);
        */
    }
```
//

	/** Activates speech synthesis channel phoneme functionality 'Q' ( _Q_uestion ) */
	UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech", DisplayName = "ARPABETSpeechSynthesis: other > pause or glottal_stop > Q ( _Q_uestion )" ))
	void ARPABETSpeechSynthesis_Q(
		UPARAM(DisplayName = "Voices") const int Voices)
	{
		if (speech_packets_TArrayUInt8.Num() < 1)
			speech_packets_TArrayUInt8.Push(ARPABETPhone::Q_Base());
		else if (current_phone && ( current_phone != ARPABETPhone::Q_Base() ))
		{
			// include a transition packet
			speech_packets_TArrayUInt8.Push(ARPABETPhone::Q_Base());
			speech_packets_TArrayUInt8.Push(ARPABETPhone::Q_Base());
		}
		else
		{
			speech_packets_TArrayUInt8.Push(ARPABETPhone::Q_Base());
		}
	};

	// Setup and Activation APIs

	/** Activates speech synthesis channel functionality 'Voice' */
	UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech, Voice", DisplayName = "ARPABETSpeechSynthesis: Voice [compile]" ))
	int /*ARPABETAudio*/ Voice()
	{
		if (speech_packets_TArrayUInt8.Num() < 1)
			return 0;

		bool transition_flag = false;

		do
		{
			uint8_t current_phone_uint8_t = speech_packets_TArrayUInt8.Last();
			speech_packets_TArrayUInt8.Pop();

			// We are either generating a phone or a phone-transition packet
			if (!transition_flag)
			{
				// generate a new phone packet

				transition_flag = true;
			}
			else
			{

				transition_flag = false;
			}
		} while (speech_packets_TArrayUInt8.Num());

		return 1;
	};

//

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UProsodyCurve : public UObject
{
	GENERATED_BODY()
};

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UDurationCurve : public UObject
{
	GENERATED_BODY()
};

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UEmotiveCurve : public UObject
{
	GENERATED_BODY()
};

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UARPABETAudio : public UObject
{
	GENERATED_BODY()

	TArray<uint8> datastream_TArrayUInt8{};

public:

	struct Save
	{
		// Lossless Audio Formats

		UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech", DisplayName = "ARPABETAudio: SaveAsWAVFile" ))
		bool AsWAVFile(UPARAM(DisplayName = "filename_FText") const FText& filename_ConstFTextRef)
		{
			/*

			// Create a FWaveFormat object

			FWaveFormat WaveFormat_FWaveFormatFile{};
			WaveFormat_FWaveFormatFile.NumChannels = 2; // Stereo
			WaveFormat_FWaveFormatFile.SampleRate = 44100; // 44.1 kHz

			// Create a FByteBulk object

			FByteBulk ByteBulk_FByteBulkObj{};
			ByteBulk_FByteBulkObj.WaveFormat = WaveFormat_FWaveFormatFile;

			// Write the datastream_TArrayUInt8 to the FByteBulk object

			ByteBulk_FByteBulkObj.Write(datastream_TArrayUInt8.GetData(), datastream_TArrayUInt8.Num());

			// Save the FByteBulk object to disk

			FFileHandle fh_FileHandle{};
			fh_FileHandle.Open(filename_ConstFTextRef, EFileWrite::FILEWRITE_Append);
			ByteBulk_FByteBulkObj.Save(fh_FileHandle);
			fh_FileHandle.Close();

			*/
			return true;
		};

		UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech", DisplayName = "ARPABETAudio: SaveAsFLACFile" ))
		bool AsFLACFile(UPARAM(DisplayName = "filename_FText") const FText& filename_ConstFTextRef)
		{
			/*

			// Create a FLAC Encoder from the datastream_TArrayUInt8

			FFLACEncoder Encoder{};

			// Set the FLAC Encoder's parameters

			Encoder.SetChannels(2);
			Encoder.SetBitRate(192000);
			Encoder.SetSampleRate(44100);

			// Initialize the FLAC Encoder

			Encoder.Initialize();

			// Write the data to the FLAC Encoder

			FByteStream ByteStream_FByteStream{};

			for (const uint8& byte : datastream_TArrayUInt8)
			{
				ByteStream_FByteStream.Add(byte);
			}

			ByteStream_FByteStream.Seek(0);

			Encoder.WriteData(ByteStream_FByteStream);

			TArray<uint8> EncodedData_TArrayUInt8 = Encoder.GetEncodedData();

			// Flush the FLAC Encoder

			Encoder.Flush();

			// Close the FLAC Encoder

			Encoder.Close();

			// Save the FLAC Encoder to a file

			return FFileHelper::SaveArrayToFile(EncodedData_TArrayUInt8, *filename_ConstFTextRef);

			*/
			return false;
		};

		// Lossy Audio Formats

		UFUNCTION(BlueprintCallable, Category = TextToSpeech, meta = ( keywords = "TTS, SpeechSynthesis, TextToSpeech", DisplayName = "ARPABETAudio: SaveAsMP3File" ))
		bool AsMP3File(UPARAM(DisplayName = "filename_FText") const FText& filename_ConstFTextRef)
		{
			/*

			// Create a ByteReader from the datastream_TArrayUInt8

			FByteReader ByteReader(filename_ConstFTextRef);

			// Create an MP3Encoder from the ByteReader

			FMP3Encoder MP3Encoder(ByteReader);

			// Encode the MP3Encoder

			MP3Encoder.Encode();

			// Get the MP3Encoder's encoded data

			TArray<uint8> EncodedData_TArrayUInt8 = MP3Encoder.GetEncodedData();

			// Write the MP3Encoder to a file

			return FFileHelper::SaveArrayToFile(EncodedData_TArrayUInt8, filename_ConstFTextRef);

			*/
			return false;
		};

		bool AsAACFile()
		{
			return true;
		};
	};

	UFUNCTION(BlueprintCallable, meta = ( DisplayName = "PlayBack",
		Keywords = "TTS, SpeechSynthesis, TextToSpeech, voice, marytts, tacotron2" ),
		Category = "TextToSpeech")
	void PlayBack()
	{

	};

};

UCLASS(Blueprintable)
class SPEECHSYNTHESISBP_API UTTSVoice : public UObject
{
	GENERATED_BODY()
};

//
    UCLASS()
    class /*SPEECHSYNTHESIS_API*/ FProsodyCurve : public UBlueprintFunctionLibrary
    {
        GENERATED_UCLASS_BODY()

	public:

    };

    UCLASS()
    class /*SPEECHSYNTHESIS_API*/ FDurationCurve : public UBlueprintFunctionLibrary
    {
        GENERATED_UCLASS_BODY()

	public:

    };

    UCLASS()
    class /*SPEECHSYNTHESIS_API*/ FEmotiveCurve : public UBlueprintFunctionLibrary
    {
        GENERATED_UCLASS_BODY()

	public:

    };
//
		USpeechSynthesisBPLibrary() :
			ChannelCount_UInt32{ 2 },
			SampleWidth_UInt32{ 2 },
			FrameRateHz_UInt32{ 44100 }
		{
			voices_FTTSVoiceArray = { FTTSVoice::Sara() };  // Only one voice chorus for simplicity
		};

        ~USpeechSynthesisBPLibrary()
        {

        }

//        
float USpeechSynthesisBPLibrary::SpeechSynthesisSampleFunction(float Param)
{
	return -1;
}

//
		UFUNCTION(BlueprintCallable, meta = ( DisplayName = "Voice [compile]", 
            Keywords = "SpeechSynthesis TextToSpeech voice marytts tacotron2" ), Category = "TextToSpeech")
        TArray<uint8> Voice()
        {
            // ... (e.g., generate wave-synthesis data)

            // ... (e.g., perform signal processing)

            return datastream_TArrayUInt8;
        };


